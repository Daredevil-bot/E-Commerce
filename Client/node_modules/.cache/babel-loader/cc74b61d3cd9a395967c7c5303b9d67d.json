{"ast":null,"code":"var baseIsEqualDeep=require('./_baseIsEqualDeep'),isObjectLike=require('./isObjectLike');/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Unordered comparison\n *  2 - Partial comparison\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */function baseIsEqual(value,other,bitmask,customizer,stack){if(value===other){return true;}if(value==null||other==null||!isObjectLike(value)&&!isObjectLike(other)){return value!==value&&other!==other;}return baseIsEqualDeep(value,other,bitmask,customizer,baseIsEqual,stack);}module.exports=baseIsEqual;","map":{"version":3,"sources":["C:/Users/asus/ecommerce project/ecommerce/ecommerce-app/server/client/src/node_modules/lodash/_baseIsEqual.js"],"names":["baseIsEqualDeep","require","isObjectLike","baseIsEqual","value","other","bitmask","customizer","stack","module","exports"],"mappings":"AAAA,GAAIA,CAAAA,eAAe,CAAGC,OAAO,CAAC,oBAAD,CAA7B,CACIC,YAAY,CAAGD,OAAO,CAAC,gBAAD,CAD1B,CAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,QAASE,CAAAA,WAAT,CAAqBC,KAArB,CAA4BC,KAA5B,CAAmCC,OAAnC,CAA4CC,UAA5C,CAAwDC,KAAxD,CAA+D,CAC7D,GAAIJ,KAAK,GAAKC,KAAd,CAAqB,CACnB,MAAO,KAAP,CACD,CACD,GAAID,KAAK,EAAI,IAAT,EAAiBC,KAAK,EAAI,IAA1B,EAAmC,CAACH,YAAY,CAACE,KAAD,CAAb,EAAwB,CAACF,YAAY,CAACG,KAAD,CAA5E,CAAsF,CACpF,MAAOD,CAAAA,KAAK,GAAKA,KAAV,EAAmBC,KAAK,GAAKA,KAApC,CACD,CACD,MAAOL,CAAAA,eAAe,CAACI,KAAD,CAAQC,KAAR,CAAeC,OAAf,CAAwBC,UAAxB,CAAoCJ,WAApC,CAAiDK,KAAjD,CAAtB,CACD,CAEDC,MAAM,CAACC,OAAP,CAAiBP,WAAjB","sourcesContent":["var baseIsEqualDeep = require('./_baseIsEqualDeep'),\n    isObjectLike = require('./isObjectLike');\n\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Unordered comparison\n *  2 - Partial comparison\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */\nfunction baseIsEqual(value, other, bitmask, customizer, stack) {\n  if (value === other) {\n    return true;\n  }\n  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n    return value !== value && other !== other;\n  }\n  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n}\n\nmodule.exports = baseIsEqual;\n"]},"metadata":{},"sourceType":"module"}