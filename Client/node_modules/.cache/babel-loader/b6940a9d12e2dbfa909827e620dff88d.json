{"ast":null,"code":"var baseIsEqual=require('./_baseIsEqual'),get=require('./get'),hasIn=require('./hasIn'),isKey=require('./_isKey'),isStrictComparable=require('./_isStrictComparable'),matchesStrictComparable=require('./_matchesStrictComparable'),toKey=require('./_toKey');/** Used to compose bitmasks for value comparisons. */var COMPARE_PARTIAL_FLAG=1,COMPARE_UNORDERED_FLAG=2;/**\n * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.\n *\n * @private\n * @param {string} path The path of the property to get.\n * @param {*} srcValue The value to match.\n * @returns {Function} Returns the new spec function.\n */function baseMatchesProperty(path,srcValue){if(isKey(path)&&isStrictComparable(srcValue)){return matchesStrictComparable(toKey(path),srcValue);}return function(object){var objValue=get(object,path);return objValue===undefined&&objValue===srcValue?hasIn(object,path):baseIsEqual(srcValue,objValue,COMPARE_PARTIAL_FLAG|COMPARE_UNORDERED_FLAG);};}module.exports=baseMatchesProperty;","map":{"version":3,"sources":["C:/Users/asus/ecommerce project/ecommerce/ecommerce-app/server/client/src/node_modules/lodash/_baseMatchesProperty.js"],"names":["baseIsEqual","require","get","hasIn","isKey","isStrictComparable","matchesStrictComparable","toKey","COMPARE_PARTIAL_FLAG","COMPARE_UNORDERED_FLAG","baseMatchesProperty","path","srcValue","object","objValue","undefined","module","exports"],"mappings":"AAAA,GAAIA,CAAAA,WAAW,CAAGC,OAAO,CAAC,gBAAD,CAAzB,CACIC,GAAG,CAAGD,OAAO,CAAC,OAAD,CADjB,CAEIE,KAAK,CAAGF,OAAO,CAAC,SAAD,CAFnB,CAGIG,KAAK,CAAGH,OAAO,CAAC,UAAD,CAHnB,CAIII,kBAAkB,CAAGJ,OAAO,CAAC,uBAAD,CAJhC,CAKIK,uBAAuB,CAAGL,OAAO,CAAC,4BAAD,CALrC,CAMIM,KAAK,CAAGN,OAAO,CAAC,UAAD,CANnB,CAQA,sDACA,GAAIO,CAAAA,oBAAoB,CAAG,CAA3B,CACIC,sBAAsB,CAAG,CAD7B,CAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,QAASC,CAAAA,mBAAT,CAA6BC,IAA7B,CAAmCC,QAAnC,CAA6C,CAC3C,GAAIR,KAAK,CAACO,IAAD,CAAL,EAAeN,kBAAkB,CAACO,QAAD,CAArC,CAAiD,CAC/C,MAAON,CAAAA,uBAAuB,CAACC,KAAK,CAACI,IAAD,CAAN,CAAcC,QAAd,CAA9B,CACD,CACD,MAAO,UAASC,MAAT,CAAiB,CACtB,GAAIC,CAAAA,QAAQ,CAAGZ,GAAG,CAACW,MAAD,CAASF,IAAT,CAAlB,CACA,MAAQG,CAAAA,QAAQ,GAAKC,SAAb,EAA0BD,QAAQ,GAAKF,QAAxC,CACHT,KAAK,CAACU,MAAD,CAASF,IAAT,CADF,CAEHX,WAAW,CAACY,QAAD,CAAWE,QAAX,CAAqBN,oBAAoB,CAAGC,sBAA5C,CAFf,CAGD,CALD,CAMD,CAEDO,MAAM,CAACC,OAAP,CAAiBP,mBAAjB","sourcesContent":["var baseIsEqual = require('./_baseIsEqual'),\n    get = require('./get'),\n    hasIn = require('./hasIn'),\n    isKey = require('./_isKey'),\n    isStrictComparable = require('./_isStrictComparable'),\n    matchesStrictComparable = require('./_matchesStrictComparable'),\n    toKey = require('./_toKey');\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/**\n * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.\n *\n * @private\n * @param {string} path The path of the property to get.\n * @param {*} srcValue The value to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction baseMatchesProperty(path, srcValue) {\n  if (isKey(path) && isStrictComparable(srcValue)) {\n    return matchesStrictComparable(toKey(path), srcValue);\n  }\n  return function(object) {\n    var objValue = get(object, path);\n    return (objValue === undefined && objValue === srcValue)\n      ? hasIn(object, path)\n      : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);\n  };\n}\n\nmodule.exports = baseMatchesProperty;\n"]},"metadata":{},"sourceType":"module"}