{"ast":null,"code":"var mapCacheClear=require('./_mapCacheClear'),mapCacheDelete=require('./_mapCacheDelete'),mapCacheGet=require('./_mapCacheGet'),mapCacheHas=require('./_mapCacheHas'),mapCacheSet=require('./_mapCacheSet');/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */function MapCache(entries){var index=-1,length=entries==null?0:entries.length;this.clear();while(++index<length){var entry=entries[index];this.set(entry[0],entry[1]);}}// Add methods to `MapCache`.\nMapCache.prototype.clear=mapCacheClear;MapCache.prototype['delete']=mapCacheDelete;MapCache.prototype.get=mapCacheGet;MapCache.prototype.has=mapCacheHas;MapCache.prototype.set=mapCacheSet;module.exports=MapCache;","map":{"version":3,"sources":["C:/Users/asus/ecommerce project/ecommerce/ecommerce-app/server/client/src/node_modules/lodash/_MapCache.js"],"names":["mapCacheClear","require","mapCacheDelete","mapCacheGet","mapCacheHas","mapCacheSet","MapCache","entries","index","length","clear","entry","set","prototype","get","has","module","exports"],"mappings":"AAAA,GAAIA,CAAAA,aAAa,CAAGC,OAAO,CAAC,kBAAD,CAA3B,CACIC,cAAc,CAAGD,OAAO,CAAC,mBAAD,CAD5B,CAEIE,WAAW,CAAGF,OAAO,CAAC,gBAAD,CAFzB,CAGIG,WAAW,CAAGH,OAAO,CAAC,gBAAD,CAHzB,CAIII,WAAW,CAAGJ,OAAO,CAAC,gBAAD,CAJzB,CAMA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,QAASK,CAAAA,QAAT,CAAkBC,OAAlB,CAA2B,CACzB,GAAIC,CAAAA,KAAK,CAAG,CAAC,CAAb,CACIC,MAAM,CAAGF,OAAO,EAAI,IAAX,CAAkB,CAAlB,CAAsBA,OAAO,CAACE,MAD3C,CAGA,KAAKC,KAAL,GACA,MAAO,EAAEF,KAAF,CAAUC,MAAjB,CAAyB,CACvB,GAAIE,CAAAA,KAAK,CAAGJ,OAAO,CAACC,KAAD,CAAnB,CACA,KAAKI,GAAL,CAASD,KAAK,CAAC,CAAD,CAAd,CAAmBA,KAAK,CAAC,CAAD,CAAxB,EACD,CACF,CAED;AACAL,QAAQ,CAACO,SAAT,CAAmBH,KAAnB,CAA2BV,aAA3B,CACAM,QAAQ,CAACO,SAAT,CAAmB,QAAnB,EAA+BX,cAA/B,CACAI,QAAQ,CAACO,SAAT,CAAmBC,GAAnB,CAAyBX,WAAzB,CACAG,QAAQ,CAACO,SAAT,CAAmBE,GAAnB,CAAyBX,WAAzB,CACAE,QAAQ,CAACO,SAAT,CAAmBD,GAAnB,CAAyBP,WAAzB,CAEAW,MAAM,CAACC,OAAP,CAAiBX,QAAjB","sourcesContent":["var mapCacheClear = require('./_mapCacheClear'),\n    mapCacheDelete = require('./_mapCacheDelete'),\n    mapCacheGet = require('./_mapCacheGet'),\n    mapCacheHas = require('./_mapCacheHas'),\n    mapCacheSet = require('./_mapCacheSet');\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\nmodule.exports = MapCache;\n"]},"metadata":{},"sourceType":"module"}