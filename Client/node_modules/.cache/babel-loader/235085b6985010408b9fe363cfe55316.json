{"ast":null,"code":"var assocIndexOf=require('./_assocIndexOf');/** Used for built-in method references. */var arrayProto=Array.prototype;/** Built-in value references. */var splice=arrayProto.splice;/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */function listCacheDelete(key){var data=this.__data__,index=assocIndexOf(data,key);if(index<0){return false;}var lastIndex=data.length-1;if(index==lastIndex){data.pop();}else{splice.call(data,index,1);}--this.size;return true;}module.exports=listCacheDelete;","map":{"version":3,"sources":["C:/Users/asus/ecommerce project/ecommerce/ecommerce-app/server/client/src/node_modules/lodash/_listCacheDelete.js"],"names":["assocIndexOf","require","arrayProto","Array","prototype","splice","listCacheDelete","key","data","__data__","index","lastIndex","length","pop","call","size","module","exports"],"mappings":"AAAA,GAAIA,CAAAA,YAAY,CAAGC,OAAO,CAAC,iBAAD,CAA1B,CAEA,2CACA,GAAIC,CAAAA,UAAU,CAAGC,KAAK,CAACC,SAAvB,CAEA,iCACA,GAAIC,CAAAA,MAAM,CAAGH,UAAU,CAACG,MAAxB,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,QAASC,CAAAA,eAAT,CAAyBC,GAAzB,CAA8B,CAC5B,GAAIC,CAAAA,IAAI,CAAG,KAAKC,QAAhB,CACIC,KAAK,CAAGV,YAAY,CAACQ,IAAD,CAAOD,GAAP,CADxB,CAGA,GAAIG,KAAK,CAAG,CAAZ,CAAe,CACb,MAAO,MAAP,CACD,CACD,GAAIC,CAAAA,SAAS,CAAGH,IAAI,CAACI,MAAL,CAAc,CAA9B,CACA,GAAIF,KAAK,EAAIC,SAAb,CAAwB,CACtBH,IAAI,CAACK,GAAL,GACD,CAFD,IAEO,CACLR,MAAM,CAACS,IAAP,CAAYN,IAAZ,CAAkBE,KAAlB,CAAyB,CAAzB,EACD,CACD,EAAE,KAAKK,IAAP,CACA,MAAO,KAAP,CACD,CAEDC,MAAM,CAACC,OAAP,CAAiBX,eAAjB","sourcesContent":["var assocIndexOf = require('./_assocIndexOf');\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype;\n\n/** Built-in value references. */\nvar splice = arrayProto.splice;\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  --this.size;\n  return true;\n}\n\nmodule.exports = listCacheDelete;\n"]},"metadata":{},"sourceType":"module"}