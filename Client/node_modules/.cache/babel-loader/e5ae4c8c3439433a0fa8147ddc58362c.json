{"ast":null,"code":"var getAllKeys=require('./_getAllKeys');/** Used to compose bitmasks for value comparisons. */var COMPARE_PARTIAL_FLAG=1;/** Used for built-in method references. */var objectProto=Object.prototype;/** Used to check objects for own properties. */var hasOwnProperty=objectProto.hasOwnProperty;/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */function equalObjects(object,other,bitmask,customizer,equalFunc,stack){var isPartial=bitmask&COMPARE_PARTIAL_FLAG,objProps=getAllKeys(object),objLength=objProps.length,othProps=getAllKeys(other),othLength=othProps.length;if(objLength!=othLength&&!isPartial){return false;}var index=objLength;while(index--){var key=objProps[index];if(!(isPartial?key in other:hasOwnProperty.call(other,key))){return false;}}// Check that cyclic values are equal.\nvar objStacked=stack.get(object);var othStacked=stack.get(other);if(objStacked&&othStacked){return objStacked==other&&othStacked==object;}var result=true;stack.set(object,other);stack.set(other,object);var skipCtor=isPartial;while(++index<objLength){key=objProps[index];var objValue=object[key],othValue=other[key];if(customizer){var compared=isPartial?customizer(othValue,objValue,key,other,object,stack):customizer(objValue,othValue,key,object,other,stack);}// Recursively compare objects (susceptible to call stack limits).\nif(!(compared===undefined?objValue===othValue||equalFunc(objValue,othValue,bitmask,customizer,stack):compared)){result=false;break;}skipCtor||(skipCtor=key=='constructor');}if(result&&!skipCtor){var objCtor=object.constructor,othCtor=other.constructor;// Non `Object` object instances with different constructors are not equal.\nif(objCtor!=othCtor&&'constructor'in object&&'constructor'in other&&!(typeof objCtor=='function'&&objCtor instanceof objCtor&&typeof othCtor=='function'&&othCtor instanceof othCtor)){result=false;}}stack['delete'](object);stack['delete'](other);return result;}module.exports=equalObjects;","map":{"version":3,"sources":["C:/Users/asus/ecommerce project/ecommerce/ecommerce-app/server/client/src/node_modules/lodash/_equalObjects.js"],"names":["getAllKeys","require","COMPARE_PARTIAL_FLAG","objectProto","Object","prototype","hasOwnProperty","equalObjects","object","other","bitmask","customizer","equalFunc","stack","isPartial","objProps","objLength","length","othProps","othLength","index","key","call","objStacked","get","othStacked","result","set","skipCtor","objValue","othValue","compared","undefined","objCtor","constructor","othCtor","module","exports"],"mappings":"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","sourcesContent":["var getAllKeys = require('./_getAllKeys');\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1;\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      objProps = getAllKeys(object),\n      objLength = objProps.length,\n      othProps = getAllKeys(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n  var index = objLength;\n  while (index--) {\n    var key = objProps[index];\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  }\n  // Check that cyclic values are equal.\n  var objStacked = stack.get(object);\n  var othStacked = stack.get(other);\n  if (objStacked && othStacked) {\n    return objStacked == other && othStacked == object;\n  }\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n\n  var skipCtor = isPartial;\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, objValue, key, other, object, stack)\n        : customizer(objValue, othValue, key, object, other, stack);\n    }\n    // Recursively compare objects (susceptible to call stack limits).\n    if (!(compared === undefined\n          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n          : compared\n        )) {\n      result = false;\n      break;\n    }\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor;\n\n    // Non `Object` object instances with different constructors are not equal.\n    if (objCtor != othCtor &&\n        ('constructor' in object && 'constructor' in other) &&\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\n\nmodule.exports = equalObjects;\n"]},"metadata":{},"sourceType":"module"}