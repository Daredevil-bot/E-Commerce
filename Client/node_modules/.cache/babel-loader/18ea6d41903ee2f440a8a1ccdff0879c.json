{"ast":null,"code":"var baseFindIndex=require('./_baseFindIndex'),baseIteratee=require('./_baseIteratee'),toInteger=require('./toInteger');/* Built-in method references for those with the same name as other `lodash` methods. */var nativeMax=Math.max;/**\n * This method is like `_.find` except that it returns the index of the first\n * element `predicate` returns truthy for instead of the element itself.\n *\n * @static\n * @memberOf _\n * @since 1.1.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @param {number} [fromIndex=0] The index to search from.\n * @returns {number} Returns the index of the found element, else `-1`.\n * @example\n *\n * var users = [\n *   { 'user': 'barney',  'active': false },\n *   { 'user': 'fred',    'active': false },\n *   { 'user': 'pebbles', 'active': true }\n * ];\n *\n * _.findIndex(users, function(o) { return o.user == 'barney'; });\n * // => 0\n *\n * // The `_.matches` iteratee shorthand.\n * _.findIndex(users, { 'user': 'fred', 'active': false });\n * // => 1\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.findIndex(users, ['active', false]);\n * // => 0\n *\n * // The `_.property` iteratee shorthand.\n * _.findIndex(users, 'active');\n * // => 2\n */function findIndex(array,predicate,fromIndex){var length=array==null?0:array.length;if(!length){return-1;}var index=fromIndex==null?0:toInteger(fromIndex);if(index<0){index=nativeMax(length+index,0);}return baseFindIndex(array,baseIteratee(predicate,3),index);}module.exports=findIndex;","map":{"version":3,"sources":["C:/Users/asus/ecommerce project/ecommerce/ecommerce-app/server/client/src/node_modules/lodash/findIndex.js"],"names":["baseFindIndex","require","baseIteratee","toInteger","nativeMax","Math","max","findIndex","array","predicate","fromIndex","length","index","module","exports"],"mappings":"AAAA,GAAIA,CAAAA,aAAa,CAAGC,OAAO,CAAC,kBAAD,CAA3B,CACIC,YAAY,CAAGD,OAAO,CAAC,iBAAD,CAD1B,CAEIE,SAAS,CAAGF,OAAO,CAAC,aAAD,CAFvB,CAIA,wFACA,GAAIG,CAAAA,SAAS,CAAGC,IAAI,CAACC,GAArB,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,QAASC,CAAAA,SAAT,CAAmBC,KAAnB,CAA0BC,SAA1B,CAAqCC,SAArC,CAAgD,CAC9C,GAAIC,CAAAA,MAAM,CAAGH,KAAK,EAAI,IAAT,CAAgB,CAAhB,CAAoBA,KAAK,CAACG,MAAvC,CACA,GAAI,CAACA,MAAL,CAAa,CACX,MAAO,CAAC,CAAR,CACD,CACD,GAAIC,CAAAA,KAAK,CAAGF,SAAS,EAAI,IAAb,CAAoB,CAApB,CAAwBP,SAAS,CAACO,SAAD,CAA7C,CACA,GAAIE,KAAK,CAAG,CAAZ,CAAe,CACbA,KAAK,CAAGR,SAAS,CAACO,MAAM,CAAGC,KAAV,CAAiB,CAAjB,CAAjB,CACD,CACD,MAAOZ,CAAAA,aAAa,CAACQ,KAAD,CAAQN,YAAY,CAACO,SAAD,CAAY,CAAZ,CAApB,CAAoCG,KAApC,CAApB,CACD,CAEDC,MAAM,CAACC,OAAP,CAAiBP,SAAjB","sourcesContent":["var baseFindIndex = require('./_baseFindIndex'),\n    baseIteratee = require('./_baseIteratee'),\n    toInteger = require('./toInteger');\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * This method is like `_.find` except that it returns the index of the first\n * element `predicate` returns truthy for instead of the element itself.\n *\n * @static\n * @memberOf _\n * @since 1.1.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @param {number} [fromIndex=0] The index to search from.\n * @returns {number} Returns the index of the found element, else `-1`.\n * @example\n *\n * var users = [\n *   { 'user': 'barney',  'active': false },\n *   { 'user': 'fred',    'active': false },\n *   { 'user': 'pebbles', 'active': true }\n * ];\n *\n * _.findIndex(users, function(o) { return o.user == 'barney'; });\n * // => 0\n *\n * // The `_.matches` iteratee shorthand.\n * _.findIndex(users, { 'user': 'fred', 'active': false });\n * // => 1\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.findIndex(users, ['active', false]);\n * // => 0\n *\n * // The `_.property` iteratee shorthand.\n * _.findIndex(users, 'active');\n * // => 2\n */\nfunction findIndex(array, predicate, fromIndex) {\n  var length = array == null ? 0 : array.length;\n  if (!length) {\n    return -1;\n  }\n  var index = fromIndex == null ? 0 : toInteger(fromIndex);\n  if (index < 0) {\n    index = nativeMax(length + index, 0);\n  }\n  return baseFindIndex(array, baseIteratee(predicate, 3), index);\n}\n\nmodule.exports = findIndex;\n"]},"metadata":{},"sourceType":"module"}