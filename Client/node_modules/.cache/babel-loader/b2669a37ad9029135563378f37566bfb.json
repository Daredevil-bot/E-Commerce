{"ast":null,"code":"var Symbol=require('./_Symbol'),arrayMap=require('./_arrayMap'),isArray=require('./isArray'),isSymbol=require('./isSymbol');/** Used as references for various `Number` constants. */var INFINITY=1/0;/** Used to convert symbols to primitives and strings. */var symbolProto=Symbol?Symbol.prototype:undefined,symbolToString=symbolProto?symbolProto.toString:undefined;/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */function baseToString(value){// Exit early for strings to avoid a performance hit in some environments.\nif(typeof value=='string'){return value;}if(isArray(value)){// Recursively convert values (susceptible to call stack limits).\nreturn arrayMap(value,baseToString)+'';}if(isSymbol(value)){return symbolToString?symbolToString.call(value):'';}var result=value+'';return result=='0'&&1/value==-INFINITY?'-0':result;}module.exports=baseToString;","map":{"version":3,"sources":["C:/Users/asus/ecommerce project/ecommerce/ecommerce-app/server/client/src/node_modules/lodash/_baseToString.js"],"names":["Symbol","require","arrayMap","isArray","isSymbol","INFINITY","symbolProto","prototype","undefined","symbolToString","toString","baseToString","value","call","result","module","exports"],"mappings":"AAAA,GAAIA,CAAAA,MAAM,CAAGC,OAAO,CAAC,WAAD,CAApB,CACIC,QAAQ,CAAGD,OAAO,CAAC,aAAD,CADtB,CAEIE,OAAO,CAAGF,OAAO,CAAC,WAAD,CAFrB,CAGIG,QAAQ,CAAGH,OAAO,CAAC,YAAD,CAHtB,CAKA,yDACA,GAAII,CAAAA,QAAQ,CAAG,EAAI,CAAnB,CAEA,yDACA,GAAIC,CAAAA,WAAW,CAAGN,MAAM,CAAGA,MAAM,CAACO,SAAV,CAAsBC,SAA9C,CACIC,cAAc,CAAGH,WAAW,CAAGA,WAAW,CAACI,QAAf,CAA0BF,SAD1D,CAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,QAASG,CAAAA,YAAT,CAAsBC,KAAtB,CAA6B,CAC3B;AACA,GAAI,MAAOA,CAAAA,KAAP,EAAgB,QAApB,CAA8B,CAC5B,MAAOA,CAAAA,KAAP,CACD,CACD,GAAIT,OAAO,CAACS,KAAD,CAAX,CAAoB,CAClB;AACA,MAAOV,CAAAA,QAAQ,CAACU,KAAD,CAAQD,YAAR,CAAR,CAAgC,EAAvC,CACD,CACD,GAAIP,QAAQ,CAACQ,KAAD,CAAZ,CAAqB,CACnB,MAAOH,CAAAA,cAAc,CAAGA,cAAc,CAACI,IAAf,CAAoBD,KAApB,CAAH,CAAgC,EAArD,CACD,CACD,GAAIE,CAAAA,MAAM,CAAIF,KAAK,CAAG,EAAtB,CACA,MAAQE,CAAAA,MAAM,EAAI,GAAV,EAAkB,EAAIF,KAAL,EAAe,CAACP,QAAlC,CAA8C,IAA9C,CAAqDS,MAA5D,CACD,CAEDC,MAAM,CAACC,OAAP,CAAiBL,YAAjB","sourcesContent":["var Symbol = require('./_Symbol'),\n    arrayMap = require('./_arrayMap'),\n    isArray = require('./isArray'),\n    isSymbol = require('./isSymbol');\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isArray(value)) {\n    // Recursively convert values (susceptible to call stack limits).\n    return arrayMap(value, baseToString) + '';\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\nmodule.exports = baseToString;\n"]},"metadata":{},"sourceType":"module"}