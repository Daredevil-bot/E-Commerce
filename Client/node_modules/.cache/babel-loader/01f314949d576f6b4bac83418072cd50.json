{"ast":null,"code":"import _toConsumableArray from\"C:\\\\Users\\\\asus\\\\ecommerce project\\\\ecommerce\\\\ecommerce-app\\\\server\\\\Client\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\toConsumableArray.js\";import _asyncToGenerator from\"C:\\\\Users\\\\asus\\\\ecommerce project\\\\ecommerce\\\\ecommerce-app\\\\server\\\\Client\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";import _slicedToArray from\"C:\\\\Users\\\\asus\\\\ecommerce project\\\\ecommerce\\\\ecommerce-app\\\\server\\\\Client\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\slicedToArray.js\";import _createForOfIteratorHelper from\"C:\\\\Users\\\\asus\\\\ecommerce project\\\\ecommerce\\\\ecommerce-app\\\\server\\\\Client\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createForOfIteratorHelper.js\";import _classCallCheck from\"C:\\\\Users\\\\asus\\\\ecommerce project\\\\ecommerce\\\\ecommerce-app\\\\server\\\\Client\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";import _createClass from\"C:\\\\Users\\\\asus\\\\ecommerce project\\\\ecommerce\\\\ecommerce-app\\\\server\\\\Client\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";import _regeneratorRuntime from\"C:\\\\Users\\\\asus\\\\ecommerce project\\\\ecommerce\\\\ecommerce-app\\\\server\\\\Client\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";import{Deferred}from'@firebase/util';/**\r\n * Component for service name T, e.g. `auth`, `auth-internal`\r\n */var Component=/*#__PURE__*/function(){/**\r\n     *\r\n     * @param name The public service name, e.g. app, auth, firestore, database\r\n     * @param instanceFactory Service factory responsible for creating the public interface\r\n     * @param type whether the service provided by the component is public or private\r\n     */function Component(name,instanceFactory,type){_classCallCheck(this,Component);this.name=name;this.instanceFactory=instanceFactory;this.type=type;this.multipleInstances=false;/**\r\n         * Properties to be added to the service namespace\r\n         */this.serviceProps={};this.instantiationMode=\"LAZY\"/* LAZY */;this.onInstanceCreated=null;}_createClass(Component,[{key:\"setInstantiationMode\",value:function setInstantiationMode(mode){this.instantiationMode=mode;return this;}},{key:\"setMultipleInstances\",value:function setMultipleInstances(multipleInstances){this.multipleInstances=multipleInstances;return this;}},{key:\"setServiceProps\",value:function setServiceProps(props){this.serviceProps=props;return this;}},{key:\"setInstanceCreatedCallback\",value:function setInstanceCreatedCallback(callback){this.onInstanceCreated=callback;return this;}}]);return Component;}();/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */var DEFAULT_ENTRY_NAME='[DEFAULT]';/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * Provider for instance for service name T, e.g. 'auth', 'auth-internal'\r\n * NameServiceMapping[T] is an alias for the type of the instance\r\n */var Provider=/*#__PURE__*/function(){function Provider(name,container){_classCallCheck(this,Provider);this.name=name;this.container=container;this.component=null;this.instances=new Map();this.instancesDeferred=new Map();this.instancesOptions=new Map();this.onInitCallbacks=new Map();}/**\r\n     * @param identifier A provider can provide mulitple instances of a service\r\n     * if this.component.multipleInstances is true.\r\n     */_createClass(Provider,[{key:\"get\",value:function get(identifier){// if multipleInstances is not supported, use the default name\nvar normalizedIdentifier=this.normalizeInstanceIdentifier(identifier);if(!this.instancesDeferred.has(normalizedIdentifier)){var deferred=new Deferred();this.instancesDeferred.set(normalizedIdentifier,deferred);if(this.isInitialized(normalizedIdentifier)||this.shouldAutoInitialize()){// initialize the service if it can be auto-initialized\ntry{var instance=this.getOrInitializeService({instanceIdentifier:normalizedIdentifier});if(instance){deferred.resolve(instance);}}catch(e){// when the instance factory throws an exception during get(), it should not cause\n// a fatal error. We just return the unresolved promise in this case.\n}}}return this.instancesDeferred.get(normalizedIdentifier).promise;}},{key:\"getImmediate\",value:function getImmediate(options){var _a;// if multipleInstances is not supported, use the default name\nvar normalizedIdentifier=this.normalizeInstanceIdentifier(options===null||options===void 0?void 0:options.identifier);var optional=(_a=options===null||options===void 0?void 0:options.optional)!==null&&_a!==void 0?_a:false;if(this.isInitialized(normalizedIdentifier)||this.shouldAutoInitialize()){try{return this.getOrInitializeService({instanceIdentifier:normalizedIdentifier});}catch(e){if(optional){return null;}else{throw e;}}}else{// In case a component is not initialized and should/can not be auto-initialized at the moment, return null if the optional flag is set, or throw\nif(optional){return null;}else{throw Error(\"Service \".concat(this.name,\" is not available\"));}}}},{key:\"getComponent\",value:function getComponent(){return this.component;}},{key:\"setComponent\",value:function setComponent(component){if(component.name!==this.name){throw Error(\"Mismatching Component \".concat(component.name,\" for Provider \").concat(this.name,\".\"));}if(this.component){throw Error(\"Component for \".concat(this.name,\" has already been provided\"));}this.component=component;// return early without attempting to initialize the component if the component requires explicit initialization (calling `Provider.initialize()`)\nif(!this.shouldAutoInitialize()){return;}// if the service is eager, initialize the default instance\nif(isComponentEager(component)){try{this.getOrInitializeService({instanceIdentifier:DEFAULT_ENTRY_NAME});}catch(e){// when the instance factory for an eager Component throws an exception during the eager\n// initialization, it should not cause a fatal error.\n// TODO: Investigate if we need to make it configurable, because some component may want to cause\n// a fatal error in this case?\n}}// Create service instances for the pending promises and resolve them\n// NOTE: if this.multipleInstances is false, only the default instance will be created\n// and all promises with resolve with it regardless of the identifier.\nvar _iterator=_createForOfIteratorHelper(this.instancesDeferred.entries()),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var _step$value=_slicedToArray(_step.value,2),instanceIdentifier=_step$value[0],instanceDeferred=_step$value[1];var normalizedIdentifier=this.normalizeInstanceIdentifier(instanceIdentifier);try{// `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.\nvar instance=this.getOrInitializeService({instanceIdentifier:normalizedIdentifier});instanceDeferred.resolve(instance);}catch(e){// when the instance factory throws an exception, it should not cause\n// a fatal error. We just leave the promise unresolved.\n}}}catch(err){_iterator.e(err);}finally{_iterator.f();}}},{key:\"clearInstance\",value:function clearInstance(){var identifier=arguments.length>0&&arguments[0]!==undefined?arguments[0]:DEFAULT_ENTRY_NAME;this.instancesDeferred.delete(identifier);this.instancesOptions.delete(identifier);this.instances.delete(identifier);}// app.delete() will call this method on every provider to delete the services\n// TODO: should we mark the provider as deleted?\n},{key:\"delete\",value:function(){var _delete2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var services;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:services=Array.from(this.instances.values());_context.next=3;return Promise.all([].concat(_toConsumableArray(services.filter(function(service){return'INTERNAL'in service;})// legacy services\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n.map(function(service){return service.INTERNAL.delete();})),_toConsumableArray(services.filter(function(service){return'_delete'in service;})// modularized services\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n.map(function(service){return service._delete();}))));case 3:case\"end\":return _context.stop();}}},_callee,this);}));function _delete(){return _delete2.apply(this,arguments);}return _delete;}()},{key:\"isComponentSet\",value:function isComponentSet(){return this.component!=null;}},{key:\"isInitialized\",value:function isInitialized(){var identifier=arguments.length>0&&arguments[0]!==undefined?arguments[0]:DEFAULT_ENTRY_NAME;return this.instances.has(identifier);}},{key:\"getOptions\",value:function getOptions(){var identifier=arguments.length>0&&arguments[0]!==undefined?arguments[0]:DEFAULT_ENTRY_NAME;return this.instancesOptions.get(identifier)||{};}},{key:\"initialize\",value:function initialize(){var opts=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};var _opts$options=opts.options,options=_opts$options===void 0?{}:_opts$options;var normalizedIdentifier=this.normalizeInstanceIdentifier(opts.instanceIdentifier);if(this.isInitialized(normalizedIdentifier)){throw Error(\"\".concat(this.name,\"(\").concat(normalizedIdentifier,\") has already been initialized\"));}if(!this.isComponentSet()){throw Error(\"Component \".concat(this.name,\" has not been registered yet\"));}var instance=this.getOrInitializeService({instanceIdentifier:normalizedIdentifier,options:options});// resolve any pending promise waiting for the service instance\nvar _iterator2=_createForOfIteratorHelper(this.instancesDeferred.entries()),_step2;try{for(_iterator2.s();!(_step2=_iterator2.n()).done;){var _step2$value=_slicedToArray(_step2.value,2),instanceIdentifier=_step2$value[0],instanceDeferred=_step2$value[1];var normalizedDeferredIdentifier=this.normalizeInstanceIdentifier(instanceIdentifier);if(normalizedIdentifier===normalizedDeferredIdentifier){instanceDeferred.resolve(instance);}}}catch(err){_iterator2.e(err);}finally{_iterator2.f();}return instance;}/**\r\n     *\r\n     * @param callback - a function that will be invoked  after the provider has been initialized by calling provider.initialize().\r\n     * The function is invoked SYNCHRONOUSLY, so it should not execute any longrunning tasks in order to not block the program.\r\n     *\r\n     * @param identifier An optional instance identifier\r\n     * @returns a function to unregister the callback\r\n     */},{key:\"onInit\",value:function onInit(callback,identifier){var _a;var normalizedIdentifier=this.normalizeInstanceIdentifier(identifier);var existingCallbacks=(_a=this.onInitCallbacks.get(normalizedIdentifier))!==null&&_a!==void 0?_a:new Set();existingCallbacks.add(callback);this.onInitCallbacks.set(normalizedIdentifier,existingCallbacks);var existingInstance=this.instances.get(normalizedIdentifier);if(existingInstance){callback(existingInstance,normalizedIdentifier);}return function(){existingCallbacks.delete(callback);};}/**\r\n     * Invoke onInit callbacks synchronously\r\n     * @param instance the service instance`\r\n     */},{key:\"invokeOnInitCallbacks\",value:function invokeOnInitCallbacks(instance,identifier){var callbacks=this.onInitCallbacks.get(identifier);if(!callbacks){return;}var _iterator3=_createForOfIteratorHelper(callbacks),_step3;try{for(_iterator3.s();!(_step3=_iterator3.n()).done;){var callback=_step3.value;try{callback(instance,identifier);}catch(_a){// ignore errors in the onInit callback\n}}}catch(err){_iterator3.e(err);}finally{_iterator3.f();}}},{key:\"getOrInitializeService\",value:function getOrInitializeService(_ref){var instanceIdentifier=_ref.instanceIdentifier,_ref$options=_ref.options,options=_ref$options===void 0?{}:_ref$options;var instance=this.instances.get(instanceIdentifier);if(!instance&&this.component){instance=this.component.instanceFactory(this.container,{instanceIdentifier:normalizeIdentifierForFactory(instanceIdentifier),options:options});this.instances.set(instanceIdentifier,instance);this.instancesOptions.set(instanceIdentifier,options);/**\r\n             * Invoke onInit listeners.\r\n             * Note this.component.onInstanceCreated is different, which is used by the component creator,\r\n             * while onInit listeners are registered by consumers of the provider.\r\n             */this.invokeOnInitCallbacks(instance,instanceIdentifier);/**\r\n             * Order is important\r\n             * onInstanceCreated() should be called after this.instances.set(instanceIdentifier, instance); which\r\n             * makes `isInitialized()` return true.\r\n             */if(this.component.onInstanceCreated){try{this.component.onInstanceCreated(this.container,instanceIdentifier,instance);}catch(_a){// ignore errors in the onInstanceCreatedCallback\n}}}return instance||null;}},{key:\"normalizeInstanceIdentifier\",value:function normalizeInstanceIdentifier(){var identifier=arguments.length>0&&arguments[0]!==undefined?arguments[0]:DEFAULT_ENTRY_NAME;if(this.component){return this.component.multipleInstances?identifier:DEFAULT_ENTRY_NAME;}else{return identifier;// assume multiple instances are supported before the component is provided.\n}}},{key:\"shouldAutoInitialize\",value:function shouldAutoInitialize(){return!!this.component&&this.component.instantiationMode!==\"EXPLICIT\"/* EXPLICIT */;}}]);return Provider;}();// undefined should be passed to the service factory for the default instance\nfunction normalizeIdentifierForFactory(identifier){return identifier===DEFAULT_ENTRY_NAME?undefined:identifier;}function isComponentEager(component){return component.instantiationMode===\"EAGER\"/* EAGER */;}/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`\r\n */var ComponentContainer=/*#__PURE__*/function(){function ComponentContainer(name){_classCallCheck(this,ComponentContainer);this.name=name;this.providers=new Map();}/**\r\n     *\r\n     * @param component Component being added\r\n     * @param overwrite When a component with the same name has already been registered,\r\n     * if overwrite is true: overwrite the existing component with the new component and create a new\r\n     * provider with the new component. It can be useful in tests where you want to use different mocks\r\n     * for different tests.\r\n     * if overwrite is false: throw an exception\r\n     */_createClass(ComponentContainer,[{key:\"addComponent\",value:function addComponent(component){var provider=this.getProvider(component.name);if(provider.isComponentSet()){throw new Error(\"Component \".concat(component.name,\" has already been registered with \").concat(this.name));}provider.setComponent(component);}},{key:\"addOrOverwriteComponent\",value:function addOrOverwriteComponent(component){var provider=this.getProvider(component.name);if(provider.isComponentSet()){// delete the existing provider from the container, so we can register the new component\nthis.providers.delete(component.name);}this.addComponent(component);}/**\r\n     * getProvider provides a type safe interface where it can only be called with a field name\r\n     * present in NameServiceMapping interface.\r\n     *\r\n     * Firebase SDKs providing services should extend NameServiceMapping interface to register\r\n     * themselves.\r\n     */},{key:\"getProvider\",value:function getProvider(name){if(this.providers.has(name)){return this.providers.get(name);}// create a Provider for a service that hasn't registered with Firebase\nvar provider=new Provider(name,this);this.providers.set(name,provider);return provider;}},{key:\"getProviders\",value:function getProviders(){return Array.from(this.providers.values());}}]);return ComponentContainer;}();export{Component,ComponentContainer,Provider};","map":{"version":3,"sources":["C:\\Users\\asus\\ecommerce project\\ecommerce\\ecommerce-app\\server\\client\\src\\node_modules\\@firebase\\component\\src\\component.ts","C:\\Users\\asus\\ecommerce project\\ecommerce\\ecommerce-app\\server\\client\\src\\node_modules\\@firebase\\component\\src\\constants.ts","C:\\Users\\asus\\ecommerce project\\ecommerce\\ecommerce-app\\server\\client\\src\\node_modules\\@firebase\\component\\src\\provider.ts","C:\\Users\\asus\\ecommerce project\\ecommerce\\ecommerce-app\\server\\client\\src\\node_modules\\@firebase\\component\\src\\component_container.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  InstantiationMode,\n  InstanceFactory,\n  ComponentType,\n  Dictionary,\n  Name,\n  onInstanceCreatedCallback\n} from './types';\n\n/**\n * Component for service name T, e.g. `auth`, `auth-internal`\n */\nexport class Component<T extends Name = Name> {\n  multipleInstances = false;\n  /**\n   * Properties to be added to the service namespace\n   */\n  serviceProps: Dictionary = {};\n\n  instantiationMode = InstantiationMode.LAZY;\n\n  onInstanceCreated: onInstanceCreatedCallback<T> | null = null;\n\n  /**\n   *\n   * @param name The public service name, e.g. app, auth, firestore, database\n   * @param instanceFactory Service factory responsible for creating the public interface\n   * @param type whether the service provided by the component is public or private\n   */\n  constructor(\n    readonly name: T,\n    readonly instanceFactory: InstanceFactory<T>,\n    readonly type: ComponentType\n  ) {}\n\n  setInstantiationMode(mode: InstantiationMode): this {\n    this.instantiationMode = mode;\n    return this;\n  }\n\n  setMultipleInstances(multipleInstances: boolean): this {\n    this.multipleInstances = multipleInstances;\n    return this;\n  }\n\n  setServiceProps(props: Dictionary): this {\n    this.serviceProps = props;\n    return this;\n  }\n\n  setInstanceCreatedCallback(callback: onInstanceCreatedCallback<T>): this {\n    this.onInstanceCreated = callback;\n    return this;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const DEFAULT_ENTRY_NAME = '[DEFAULT]';\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Deferred } from '@firebase/util';\nimport { ComponentContainer } from './component_container';\nimport { DEFAULT_ENTRY_NAME } from './constants';\nimport {\n  InitializeOptions,\n  InstantiationMode,\n  Name,\n  NameServiceMapping,\n  OnInitCallBack\n} from './types';\nimport { Component } from './component';\n\n/**\n * Provider for instance for service name T, e.g. 'auth', 'auth-internal'\n * NameServiceMapping[T] is an alias for the type of the instance\n */\nexport class Provider<T extends Name> {\n  private component: Component<T> | null = null;\n  private readonly instances: Map<string, NameServiceMapping[T]> = new Map();\n  private readonly instancesDeferred: Map<\n    string,\n    Deferred<NameServiceMapping[T]>\n  > = new Map();\n  private readonly instancesOptions: Map<string, Record<string, unknown>> =\n    new Map();\n  private onInitCallbacks: Map<string, Set<OnInitCallBack<T>>> = new Map();\n\n  constructor(\n    private readonly name: T,\n    private readonly container: ComponentContainer\n  ) {}\n\n  /**\n   * @param identifier A provider can provide mulitple instances of a service\n   * if this.component.multipleInstances is true.\n   */\n  get(identifier?: string): Promise<NameServiceMapping[T]> {\n    // if multipleInstances is not supported, use the default name\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\n\n    if (!this.instancesDeferred.has(normalizedIdentifier)) {\n      const deferred = new Deferred<NameServiceMapping[T]>();\n      this.instancesDeferred.set(normalizedIdentifier, deferred);\n\n      if (\n        this.isInitialized(normalizedIdentifier) ||\n        this.shouldAutoInitialize()\n      ) {\n        // initialize the service if it can be auto-initialized\n        try {\n          const instance = this.getOrInitializeService({\n            instanceIdentifier: normalizedIdentifier\n          });\n          if (instance) {\n            deferred.resolve(instance);\n          }\n        } catch (e) {\n          // when the instance factory throws an exception during get(), it should not cause\n          // a fatal error. We just return the unresolved promise in this case.\n        }\n      }\n    }\n\n    return this.instancesDeferred.get(normalizedIdentifier)!.promise;\n  }\n\n  /**\n   *\n   * @param options.identifier A provider can provide mulitple instances of a service\n   * if this.component.multipleInstances is true.\n   * @param options.optional If optional is false or not provided, the method throws an error when\n   * the service is not immediately available.\n   * If optional is true, the method returns null if the service is not immediately available.\n   */\n  getImmediate(options: {\n    identifier?: string;\n    optional: true;\n  }): NameServiceMapping[T] | null;\n  getImmediate(options?: {\n    identifier?: string;\n    optional?: false;\n  }): NameServiceMapping[T];\n  getImmediate(options?: {\n    identifier?: string;\n    optional?: boolean;\n  }): NameServiceMapping[T] | null {\n    // if multipleInstances is not supported, use the default name\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(\n      options?.identifier\n    );\n    const optional = options?.optional ?? false;\n\n    if (\n      this.isInitialized(normalizedIdentifier) ||\n      this.shouldAutoInitialize()\n    ) {\n      try {\n        return this.getOrInitializeService({\n          instanceIdentifier: normalizedIdentifier\n        });\n      } catch (e) {\n        if (optional) {\n          return null;\n        } else {\n          throw e;\n        }\n      }\n    } else {\n      // In case a component is not initialized and should/can not be auto-initialized at the moment, return null if the optional flag is set, or throw\n      if (optional) {\n        return null;\n      } else {\n        throw Error(`Service ${this.name} is not available`);\n      }\n    }\n  }\n\n  getComponent(): Component<T> | null {\n    return this.component;\n  }\n\n  setComponent(component: Component<T>): void {\n    if (component.name !== this.name) {\n      throw Error(\n        `Mismatching Component ${component.name} for Provider ${this.name}.`\n      );\n    }\n\n    if (this.component) {\n      throw Error(`Component for ${this.name} has already been provided`);\n    }\n\n    this.component = component;\n\n    // return early without attempting to initialize the component if the component requires explicit initialization (calling `Provider.initialize()`)\n    if (!this.shouldAutoInitialize()) {\n      return;\n    }\n\n    // if the service is eager, initialize the default instance\n    if (isComponentEager(component)) {\n      try {\n        this.getOrInitializeService({ instanceIdentifier: DEFAULT_ENTRY_NAME });\n      } catch (e) {\n        // when the instance factory for an eager Component throws an exception during the eager\n        // initialization, it should not cause a fatal error.\n        // TODO: Investigate if we need to make it configurable, because some component may want to cause\n        // a fatal error in this case?\n      }\n    }\n\n    // Create service instances for the pending promises and resolve them\n    // NOTE: if this.multipleInstances is false, only the default instance will be created\n    // and all promises with resolve with it regardless of the identifier.\n    for (const [\n      instanceIdentifier,\n      instanceDeferred\n    ] of this.instancesDeferred.entries()) {\n      const normalizedIdentifier =\n        this.normalizeInstanceIdentifier(instanceIdentifier);\n\n      try {\n        // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.\n        const instance = this.getOrInitializeService({\n          instanceIdentifier: normalizedIdentifier\n        })!;\n        instanceDeferred.resolve(instance);\n      } catch (e) {\n        // when the instance factory throws an exception, it should not cause\n        // a fatal error. We just leave the promise unresolved.\n      }\n    }\n  }\n\n  clearInstance(identifier: string = DEFAULT_ENTRY_NAME): void {\n    this.instancesDeferred.delete(identifier);\n    this.instancesOptions.delete(identifier);\n    this.instances.delete(identifier);\n  }\n\n  // app.delete() will call this method on every provider to delete the services\n  // TODO: should we mark the provider as deleted?\n  async delete(): Promise<void> {\n    const services = Array.from(this.instances.values());\n\n    await Promise.all([\n      ...services\n        .filter(service => 'INTERNAL' in service) // legacy services\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        .map(service => (service as any).INTERNAL!.delete()),\n      ...services\n        .filter(service => '_delete' in service) // modularized services\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        .map(service => (service as any)._delete())\n    ]);\n  }\n\n  isComponentSet(): boolean {\n    return this.component != null;\n  }\n\n  isInitialized(identifier: string = DEFAULT_ENTRY_NAME): boolean {\n    return this.instances.has(identifier);\n  }\n\n  getOptions(identifier: string = DEFAULT_ENTRY_NAME): Record<string, unknown> {\n    return this.instancesOptions.get(identifier) || {};\n  }\n\n  initialize(opts: InitializeOptions = {}): NameServiceMapping[T] {\n    const { options = {} } = opts;\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(\n      opts.instanceIdentifier\n    );\n    if (this.isInitialized(normalizedIdentifier)) {\n      throw Error(\n        `${this.name}(${normalizedIdentifier}) has already been initialized`\n      );\n    }\n\n    if (!this.isComponentSet()) {\n      throw Error(`Component ${this.name} has not been registered yet`);\n    }\n\n    const instance = this.getOrInitializeService({\n      instanceIdentifier: normalizedIdentifier,\n      options\n    })!;\n\n    // resolve any pending promise waiting for the service instance\n    for (const [\n      instanceIdentifier,\n      instanceDeferred\n    ] of this.instancesDeferred.entries()) {\n      const normalizedDeferredIdentifier =\n        this.normalizeInstanceIdentifier(instanceIdentifier);\n      if (normalizedIdentifier === normalizedDeferredIdentifier) {\n        instanceDeferred.resolve(instance);\n      }\n    }\n\n    return instance;\n  }\n\n  /**\n   *\n   * @param callback - a function that will be invoked  after the provider has been initialized by calling provider.initialize().\n   * The function is invoked SYNCHRONOUSLY, so it should not execute any longrunning tasks in order to not block the program.\n   *\n   * @param identifier An optional instance identifier\n   * @returns a function to unregister the callback\n   */\n  onInit(callback: OnInitCallBack<T>, identifier?: string): () => void {\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\n    const existingCallbacks =\n      this.onInitCallbacks.get(normalizedIdentifier) ??\n      new Set<OnInitCallBack<T>>();\n    existingCallbacks.add(callback);\n    this.onInitCallbacks.set(normalizedIdentifier, existingCallbacks);\n\n    const existingInstance = this.instances.get(normalizedIdentifier);\n    if (existingInstance) {\n      callback(existingInstance, normalizedIdentifier);\n    }\n\n    return () => {\n      existingCallbacks.delete(callback);\n    };\n  }\n\n  /**\n   * Invoke onInit callbacks synchronously\n   * @param instance the service instance`\n   */\n  private invokeOnInitCallbacks(\n    instance: NameServiceMapping[T],\n    identifier: string\n  ): void {\n    const callbacks = this.onInitCallbacks.get(identifier);\n    if (!callbacks) {\n      return;\n    }\n    for (const callback of callbacks) {\n      try {\n        callback(instance, identifier);\n      } catch {\n        // ignore errors in the onInit callback\n      }\n    }\n  }\n\n  private getOrInitializeService({\n    instanceIdentifier,\n    options = {}\n  }: {\n    instanceIdentifier: string;\n    options?: Record<string, unknown>;\n  }): NameServiceMapping[T] | null {\n    let instance = this.instances.get(instanceIdentifier);\n    if (!instance && this.component) {\n      instance = this.component.instanceFactory(this.container, {\n        instanceIdentifier: normalizeIdentifierForFactory(instanceIdentifier),\n        options\n      });\n      this.instances.set(instanceIdentifier, instance);\n      this.instancesOptions.set(instanceIdentifier, options);\n\n      /**\n       * Invoke onInit listeners.\n       * Note this.component.onInstanceCreated is different, which is used by the component creator,\n       * while onInit listeners are registered by consumers of the provider.\n       */\n      this.invokeOnInitCallbacks(instance, instanceIdentifier);\n\n      /**\n       * Order is important\n       * onInstanceCreated() should be called after this.instances.set(instanceIdentifier, instance); which\n       * makes `isInitialized()` return true.\n       */\n      if (this.component.onInstanceCreated) {\n        try {\n          this.component.onInstanceCreated(\n            this.container,\n            instanceIdentifier,\n            instance\n          );\n        } catch {\n          // ignore errors in the onInstanceCreatedCallback\n        }\n      }\n    }\n\n    return instance || null;\n  }\n\n  private normalizeInstanceIdentifier(\n    identifier: string = DEFAULT_ENTRY_NAME\n  ): string {\n    if (this.component) {\n      return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME;\n    } else {\n      return identifier; // assume multiple instances are supported before the component is provided.\n    }\n  }\n\n  private shouldAutoInitialize(): boolean {\n    return (\n      !!this.component &&\n      this.component.instantiationMode !== InstantiationMode.EXPLICIT\n    );\n  }\n}\n\n// undefined should be passed to the service factory for the default instance\nfunction normalizeIdentifierForFactory(identifier: string): string | undefined {\n  return identifier === DEFAULT_ENTRY_NAME ? undefined : identifier;\n}\n\nfunction isComponentEager<T extends Name>(component: Component<T>): boolean {\n  return component.instantiationMode === InstantiationMode.EAGER;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Provider } from './provider';\nimport { Component } from './component';\nimport { Name } from './types';\n\n/**\n * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`\n */\nexport class ComponentContainer {\n  private readonly providers = new Map<string, Provider<Name>>();\n\n  constructor(private readonly name: string) {}\n\n  /**\n   *\n   * @param component Component being added\n   * @param overwrite When a component with the same name has already been registered,\n   * if overwrite is true: overwrite the existing component with the new component and create a new\n   * provider with the new component. It can be useful in tests where you want to use different mocks\n   * for different tests.\n   * if overwrite is false: throw an exception\n   */\n  addComponent<T extends Name>(component: Component<T>): void {\n    const provider = this.getProvider(component.name);\n    if (provider.isComponentSet()) {\n      throw new Error(\n        `Component ${component.name} has already been registered with ${this.name}`\n      );\n    }\n\n    provider.setComponent(component);\n  }\n\n  addOrOverwriteComponent<T extends Name>(component: Component<T>): void {\n    const provider = this.getProvider(component.name);\n    if (provider.isComponentSet()) {\n      // delete the existing provider from the container, so we can register the new component\n      this.providers.delete(component.name);\n    }\n\n    this.addComponent(component);\n  }\n\n  /**\n   * getProvider provides a type safe interface where it can only be called with a field name\n   * present in NameServiceMapping interface.\n   *\n   * Firebase SDKs providing services should extend NameServiceMapping interface to register\n   * themselves.\n   */\n  getProvider<T extends Name>(name: T): Provider<T> {\n    if (this.providers.has(name)) {\n      return this.providers.get(name) as unknown as Provider<T>;\n    }\n\n    // create a Provider for a service that hasn't registered with Firebase\n    const provider = new Provider<T>(name, this);\n    this.providers.set(name, provider as unknown as Provider<Name>);\n\n    return provider as Provider<T>;\n  }\n\n  getProviders(): Array<Provider<Name>> {\n    return Array.from(this.providers.values());\n  }\n}\n"]},"metadata":{},"sourceType":"module"}