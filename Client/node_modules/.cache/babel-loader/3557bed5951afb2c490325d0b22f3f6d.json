{"ast":null,"code":"var Symbol=require('./_Symbol'),Uint8Array=require('./_Uint8Array'),eq=require('./eq'),equalArrays=require('./_equalArrays'),mapToArray=require('./_mapToArray'),setToArray=require('./_setToArray');/** Used to compose bitmasks for value comparisons. */var COMPARE_PARTIAL_FLAG=1,COMPARE_UNORDERED_FLAG=2;/** `Object#toString` result references. */var boolTag='[object Boolean]',dateTag='[object Date]',errorTag='[object Error]',mapTag='[object Map]',numberTag='[object Number]',regexpTag='[object RegExp]',setTag='[object Set]',stringTag='[object String]',symbolTag='[object Symbol]';var arrayBufferTag='[object ArrayBuffer]',dataViewTag='[object DataView]';/** Used to convert symbols to primitives and strings. */var symbolProto=Symbol?Symbol.prototype:undefined,symbolValueOf=symbolProto?symbolProto.valueOf:undefined;/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */function equalByTag(object,other,tag,bitmask,customizer,equalFunc,stack){switch(tag){case dataViewTag:if(object.byteLength!=other.byteLength||object.byteOffset!=other.byteOffset){return false;}object=object.buffer;other=other.buffer;case arrayBufferTag:if(object.byteLength!=other.byteLength||!equalFunc(new Uint8Array(object),new Uint8Array(other))){return false;}return true;case boolTag:case dateTag:case numberTag:// Coerce booleans to `1` or `0` and dates to milliseconds.\n// Invalid dates are coerced to `NaN`.\nreturn eq(+object,+other);case errorTag:return object.name==other.name&&object.message==other.message;case regexpTag:case stringTag:// Coerce regexes to strings and treat strings, primitives and objects,\n// as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n// for more details.\nreturn object==other+'';case mapTag:var convert=mapToArray;case setTag:var isPartial=bitmask&COMPARE_PARTIAL_FLAG;convert||(convert=setToArray);if(object.size!=other.size&&!isPartial){return false;}// Assume cyclic values are equal.\nvar stacked=stack.get(object);if(stacked){return stacked==other;}bitmask|=COMPARE_UNORDERED_FLAG;// Recursively compare objects (susceptible to call stack limits).\nstack.set(object,other);var result=equalArrays(convert(object),convert(other),bitmask,customizer,equalFunc,stack);stack['delete'](object);return result;case symbolTag:if(symbolValueOf){return symbolValueOf.call(object)==symbolValueOf.call(other);}}return false;}module.exports=equalByTag;","map":{"version":3,"sources":["C:/Users/asus/ecommerce project/ecommerce/ecommerce-app/server/client/src/node_modules/lodash/_equalByTag.js"],"names":["Symbol","require","Uint8Array","eq","equalArrays","mapToArray","setToArray","COMPARE_PARTIAL_FLAG","COMPARE_UNORDERED_FLAG","boolTag","dateTag","errorTag","mapTag","numberTag","regexpTag","setTag","stringTag","symbolTag","arrayBufferTag","dataViewTag","symbolProto","prototype","undefined","symbolValueOf","valueOf","equalByTag","object","other","tag","bitmask","customizer","equalFunc","stack","byteLength","byteOffset","buffer","name","message","convert","isPartial","size","stacked","get","set","result","call","module","exports"],"mappings":"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","sourcesContent":["var Symbol = require('./_Symbol'),\n    Uint8Array = require('./_Uint8Array'),\n    eq = require('./eq'),\n    equalArrays = require('./_equalArrays'),\n    mapToArray = require('./_mapToArray'),\n    setToArray = require('./_setToArray');\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/** `Object#toString` result references. */\nvar boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]';\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= COMPARE_UNORDERED_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\nmodule.exports = equalByTag;\n"]},"metadata":{},"sourceType":"module"}