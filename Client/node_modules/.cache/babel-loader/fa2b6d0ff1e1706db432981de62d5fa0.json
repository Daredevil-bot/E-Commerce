{"ast":null,"code":"var SetCache=require('./_SetCache'),arraySome=require('./_arraySome'),cacheHas=require('./_cacheHas');/** Used to compose bitmasks for value comparisons. */var COMPARE_PARTIAL_FLAG=1,COMPARE_UNORDERED_FLAG=2;/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */function equalArrays(array,other,bitmask,customizer,equalFunc,stack){var isPartial=bitmask&COMPARE_PARTIAL_FLAG,arrLength=array.length,othLength=other.length;if(arrLength!=othLength&&!(isPartial&&othLength>arrLength)){return false;}// Check that cyclic values are equal.\nvar arrStacked=stack.get(array);var othStacked=stack.get(other);if(arrStacked&&othStacked){return arrStacked==other&&othStacked==array;}var index=-1,result=true,seen=bitmask&COMPARE_UNORDERED_FLAG?new SetCache():undefined;stack.set(array,other);stack.set(other,array);// Ignore non-index properties.\nwhile(++index<arrLength){var arrValue=array[index],othValue=other[index];if(customizer){var compared=isPartial?customizer(othValue,arrValue,index,other,array,stack):customizer(arrValue,othValue,index,array,other,stack);}if(compared!==undefined){if(compared){continue;}result=false;break;}// Recursively compare arrays (susceptible to call stack limits).\nif(seen){if(!arraySome(other,function(othValue,othIndex){if(!cacheHas(seen,othIndex)&&(arrValue===othValue||equalFunc(arrValue,othValue,bitmask,customizer,stack))){return seen.push(othIndex);}})){result=false;break;}}else if(!(arrValue===othValue||equalFunc(arrValue,othValue,bitmask,customizer,stack))){result=false;break;}}stack['delete'](array);stack['delete'](other);return result;}module.exports=equalArrays;","map":{"version":3,"sources":["C:/Users/asus/ecommerce project/ecommerce/ecommerce-app/server/client/src/node_modules/lodash/_equalArrays.js"],"names":["SetCache","require","arraySome","cacheHas","COMPARE_PARTIAL_FLAG","COMPARE_UNORDERED_FLAG","equalArrays","array","other","bitmask","customizer","equalFunc","stack","isPartial","arrLength","length","othLength","arrStacked","get","othStacked","index","result","seen","undefined","set","arrValue","othValue","compared","othIndex","push","module","exports"],"mappings":"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","sourcesContent":["var SetCache = require('./_SetCache'),\n    arraySome = require('./_arraySome'),\n    cacheHas = require('./_cacheHas');\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Check that cyclic values are equal.\n  var arrStacked = stack.get(array);\n  var othStacked = stack.get(other);\n  if (arrStacked && othStacked) {\n    return arrStacked == other && othStacked == array;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!cacheHas(seen, othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n              return seen.push(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, bitmask, customizer, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\nmodule.exports = equalArrays;\n"]},"metadata":{},"sourceType":"module"}