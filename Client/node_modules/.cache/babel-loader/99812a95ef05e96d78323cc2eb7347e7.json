{"ast":null,"code":"import _createForOfIteratorHelper from\"C:\\\\Users\\\\asus\\\\ecommerce project\\\\ecommerce\\\\ecommerce-app\\\\server\\\\Client\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createForOfIteratorHelper.js\";import _classCallCheck from\"C:\\\\Users\\\\asus\\\\ecommerce project\\\\ecommerce\\\\ecommerce-app\\\\server\\\\Client\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";import _createClass from\"C:\\\\Users\\\\asus\\\\ecommerce project\\\\ecommerce\\\\ecommerce-app\\\\server\\\\Client\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";import _defineProperty from\"C:\\\\Users\\\\asus\\\\ecommerce project\\\\ecommerce\\\\ecommerce-app\\\\server\\\\Client\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\defineProperty.js\";var _ConsoleMethod;/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * A container for all of the Logger instances\r\n */var instances=[];/**\r\n * The JS SDK supports 5 log levels and also allows a user the ability to\r\n * silence the logs altogether.\r\n *\r\n * The order is a follows:\r\n * DEBUG < VERBOSE < INFO < WARN < ERROR\r\n *\r\n * All of the log types above the current log level will be captured (i.e. if\r\n * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and\r\n * `VERBOSE` logs will not)\r\n */var LogLevel;(function(LogLevel){LogLevel[LogLevel[\"DEBUG\"]=0]=\"DEBUG\";LogLevel[LogLevel[\"VERBOSE\"]=1]=\"VERBOSE\";LogLevel[LogLevel[\"INFO\"]=2]=\"INFO\";LogLevel[LogLevel[\"WARN\"]=3]=\"WARN\";LogLevel[LogLevel[\"ERROR\"]=4]=\"ERROR\";LogLevel[LogLevel[\"SILENT\"]=5]=\"SILENT\";})(LogLevel||(LogLevel={}));var levelStringToEnum={'debug':LogLevel.DEBUG,'verbose':LogLevel.VERBOSE,'info':LogLevel.INFO,'warn':LogLevel.WARN,'error':LogLevel.ERROR,'silent':LogLevel.SILENT};/**\r\n * The default log level\r\n */var defaultLogLevel=LogLevel.INFO;/**\r\n * By default, `console.debug` is not displayed in the developer console (in\r\n * chrome). To avoid forcing users to have to opt-in to these logs twice\r\n * (i.e. once for firebase, and once in the console), we are sending `DEBUG`\r\n * logs to the `console.log` function.\r\n */var ConsoleMethod=(_ConsoleMethod={},_defineProperty(_ConsoleMethod,LogLevel.DEBUG,'log'),_defineProperty(_ConsoleMethod,LogLevel.VERBOSE,'log'),_defineProperty(_ConsoleMethod,LogLevel.INFO,'info'),_defineProperty(_ConsoleMethod,LogLevel.WARN,'warn'),_defineProperty(_ConsoleMethod,LogLevel.ERROR,'error'),_ConsoleMethod);/**\r\n * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR\r\n * messages on to their corresponding console counterparts (if the log method\r\n * is supported by the current log level)\r\n */var defaultLogHandler=function defaultLogHandler(instance,logType){if(logType<instance.logLevel){return;}var now=new Date().toISOString();var method=ConsoleMethod[logType];if(method){var _console;for(var _len=arguments.length,args=new Array(_len>2?_len-2:0),_key=2;_key<_len;_key++){args[_key-2]=arguments[_key];}(_console=console)[method].apply(_console,[\"[\".concat(now,\"]  \").concat(instance.name,\":\")].concat(args));}else{throw new Error(\"Attempted to log a message with an invalid logType (value: \".concat(logType,\")\"));}};var Logger=/*#__PURE__*/function(){/**\r\n     * Gives you an instance of a Logger to capture messages according to\r\n     * Firebase's logging scheme.\r\n     *\r\n     * @param name The name that the logs will be associated with\r\n     */function Logger(name){_classCallCheck(this,Logger);this.name=name;/**\r\n         * The log level of the given Logger instance.\r\n         */this._logLevel=defaultLogLevel;/**\r\n         * The main (internal) log handler for the Logger instance.\r\n         * Can be set to a new function in internal package code but not by user.\r\n         */this._logHandler=defaultLogHandler;/**\r\n         * The optional, additional, user-defined log handler for the Logger instance.\r\n         */this._userLogHandler=null;/**\r\n         * Capture the current instance for later use\r\n         */instances.push(this);}_createClass(Logger,[{key:\"logLevel\",get:function get(){return this._logLevel;},set:function set(val){if(!(val in LogLevel)){throw new TypeError(\"Invalid value \\\"\".concat(val,\"\\\" assigned to `logLevel`\"));}this._logLevel=val;}// Workaround for setter/getter having to be the same type.\n},{key:\"setLogLevel\",value:function setLogLevel(val){this._logLevel=typeof val==='string'?levelStringToEnum[val]:val;}},{key:\"logHandler\",get:function get(){return this._logHandler;},set:function set(val){if(typeof val!=='function'){throw new TypeError('Value assigned to `logHandler` must be a function');}this._logHandler=val;}},{key:\"userLogHandler\",get:function get(){return this._userLogHandler;},set:function set(val){this._userLogHandler=val;}/**\r\n     * The functions below are all based on the `console` interface\r\n     */},{key:\"debug\",value:function debug(){for(var _len2=arguments.length,args=new Array(_len2),_key2=0;_key2<_len2;_key2++){args[_key2]=arguments[_key2];}this._userLogHandler&&this._userLogHandler.apply(this,[this,LogLevel.DEBUG].concat(args));this._logHandler.apply(this,[this,LogLevel.DEBUG].concat(args));}},{key:\"log\",value:function log(){for(var _len3=arguments.length,args=new Array(_len3),_key3=0;_key3<_len3;_key3++){args[_key3]=arguments[_key3];}this._userLogHandler&&this._userLogHandler.apply(this,[this,LogLevel.VERBOSE].concat(args));this._logHandler.apply(this,[this,LogLevel.VERBOSE].concat(args));}},{key:\"info\",value:function info(){for(var _len4=arguments.length,args=new Array(_len4),_key4=0;_key4<_len4;_key4++){args[_key4]=arguments[_key4];}this._userLogHandler&&this._userLogHandler.apply(this,[this,LogLevel.INFO].concat(args));this._logHandler.apply(this,[this,LogLevel.INFO].concat(args));}},{key:\"warn\",value:function warn(){for(var _len5=arguments.length,args=new Array(_len5),_key5=0;_key5<_len5;_key5++){args[_key5]=arguments[_key5];}this._userLogHandler&&this._userLogHandler.apply(this,[this,LogLevel.WARN].concat(args));this._logHandler.apply(this,[this,LogLevel.WARN].concat(args));}},{key:\"error\",value:function error(){for(var _len6=arguments.length,args=new Array(_len6),_key6=0;_key6<_len6;_key6++){args[_key6]=arguments[_key6];}this._userLogHandler&&this._userLogHandler.apply(this,[this,LogLevel.ERROR].concat(args));this._logHandler.apply(this,[this,LogLevel.ERROR].concat(args));}}]);return Logger;}();function setLogLevel(level){instances.forEach(function(inst){inst.setLogLevel(level);});}function setUserLogHandler(logCallback,options){var _iterator=_createForOfIteratorHelper(instances),_step;try{var _loop=function _loop(){var instance=_step.value;var customLogLevel=null;if(options&&options.level){customLogLevel=levelStringToEnum[options.level];}if(logCallback===null){instance.userLogHandler=null;}else{instance.userLogHandler=function(instance,level){for(var _len7=arguments.length,args=new Array(_len7>2?_len7-2:0),_key7=2;_key7<_len7;_key7++){args[_key7-2]=arguments[_key7];}var message=args.map(function(arg){if(arg==null){return null;}else if(typeof arg==='string'){return arg;}else if(typeof arg==='number'||typeof arg==='boolean'){return arg.toString();}else if(arg instanceof Error){return arg.message;}else{try{return JSON.stringify(arg);}catch(ignored){return null;}}}).filter(function(arg){return arg;}).join(' ');if(level>=(customLogLevel!==null&&customLogLevel!==void 0?customLogLevel:instance.logLevel)){logCallback({level:LogLevel[level].toLowerCase(),message:message,args:args,type:instance.name});}};}};for(_iterator.s();!(_step=_iterator.n()).done;){_loop();}}catch(err){_iterator.e(err);}finally{_iterator.f();}}export{LogLevel,Logger,setLogLevel,setUserLogHandler};","map":{"version":3,"sources":["C:\\Users\\asus\\ecommerce project\\ecommerce\\ecommerce-app\\server\\client\\src\\node_modules\\@firebase\\logger\\src\\logger.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport type LogLevelString =\n  | 'debug'\n  | 'verbose'\n  | 'info'\n  | 'warn'\n  | 'error'\n  | 'silent';\n\nexport interface LogOptions {\n  level: LogLevelString;\n}\n\nexport type LogCallback = (callbackParams: LogCallbackParams) => void;\n\nexport interface LogCallbackParams {\n  level: LogLevelString;\n  message: string;\n  args: unknown[];\n  type: string;\n}\n\n/**\n * A container for all of the Logger instances\n */\nexport const instances: Logger[] = [];\n\n/**\n * The JS SDK supports 5 log levels and also allows a user the ability to\n * silence the logs altogether.\n *\n * The order is a follows:\n * DEBUG < VERBOSE < INFO < WARN < ERROR\n *\n * All of the log types above the current log level will be captured (i.e. if\n * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and\n * `VERBOSE` logs will not)\n */\nexport enum LogLevel {\n  DEBUG,\n  VERBOSE,\n  INFO,\n  WARN,\n  ERROR,\n  SILENT\n}\n\nconst levelStringToEnum: { [key in LogLevelString]: LogLevel } = {\n  'debug': LogLevel.DEBUG,\n  'verbose': LogLevel.VERBOSE,\n  'info': LogLevel.INFO,\n  'warn': LogLevel.WARN,\n  'error': LogLevel.ERROR,\n  'silent': LogLevel.SILENT\n};\n\n/**\n * The default log level\n */\nconst defaultLogLevel: LogLevel = LogLevel.INFO;\n\n/**\n * We allow users the ability to pass their own log handler. We will pass the\n * type of log, the current log level, and any other arguments passed (i.e. the\n * messages that the user wants to log) to this function.\n */\nexport type LogHandler = (\n  loggerInstance: Logger,\n  logType: LogLevel,\n  ...args: unknown[]\n) => void;\n\n/**\n * By default, `console.debug` is not displayed in the developer console (in\n * chrome). To avoid forcing users to have to opt-in to these logs twice\n * (i.e. once for firebase, and once in the console), we are sending `DEBUG`\n * logs to the `console.log` function.\n */\nconst ConsoleMethod = {\n  [LogLevel.DEBUG]: 'log',\n  [LogLevel.VERBOSE]: 'log',\n  [LogLevel.INFO]: 'info',\n  [LogLevel.WARN]: 'warn',\n  [LogLevel.ERROR]: 'error'\n};\n\n/**\n * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR\n * messages on to their corresponding console counterparts (if the log method\n * is supported by the current log level)\n */\nconst defaultLogHandler: LogHandler = (instance, logType, ...args): void => {\n  if (logType < instance.logLevel) {\n    return;\n  }\n  const now = new Date().toISOString();\n  const method = ConsoleMethod[logType as keyof typeof ConsoleMethod];\n  if (method) {\n    console[method as 'log' | 'info' | 'warn' | 'error'](\n      `[${now}]  ${instance.name}:`,\n      ...args\n    );\n  } else {\n    throw new Error(\n      `Attempted to log a message with an invalid logType (value: ${logType})`\n    );\n  }\n};\n\nexport class Logger {\n  /**\n   * Gives you an instance of a Logger to capture messages according to\n   * Firebase's logging scheme.\n   *\n   * @param name The name that the logs will be associated with\n   */\n  constructor(public name: string) {\n    /**\n     * Capture the current instance for later use\n     */\n    instances.push(this);\n  }\n\n  /**\n   * The log level of the given Logger instance.\n   */\n  private _logLevel = defaultLogLevel;\n\n  get logLevel(): LogLevel {\n    return this._logLevel;\n  }\n\n  set logLevel(val: LogLevel) {\n    if (!(val in LogLevel)) {\n      throw new TypeError(`Invalid value \"${val}\" assigned to \\`logLevel\\``);\n    }\n    this._logLevel = val;\n  }\n\n  // Workaround for setter/getter having to be the same type.\n  setLogLevel(val: LogLevel | LogLevelString): void {\n    this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;\n  }\n\n  /**\n   * The main (internal) log handler for the Logger instance.\n   * Can be set to a new function in internal package code but not by user.\n   */\n  private _logHandler: LogHandler = defaultLogHandler;\n  get logHandler(): LogHandler {\n    return this._logHandler;\n  }\n  set logHandler(val: LogHandler) {\n    if (typeof val !== 'function') {\n      throw new TypeError('Value assigned to `logHandler` must be a function');\n    }\n    this._logHandler = val;\n  }\n\n  /**\n   * The optional, additional, user-defined log handler for the Logger instance.\n   */\n  private _userLogHandler: LogHandler | null = null;\n  get userLogHandler(): LogHandler | null {\n    return this._userLogHandler;\n  }\n  set userLogHandler(val: LogHandler | null) {\n    this._userLogHandler = val;\n  }\n\n  /**\n   * The functions below are all based on the `console` interface\n   */\n\n  debug(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.DEBUG, ...args);\n    this._logHandler(this, LogLevel.DEBUG, ...args);\n  }\n  log(...args: unknown[]): void {\n    this._userLogHandler &&\n      this._userLogHandler(this, LogLevel.VERBOSE, ...args);\n    this._logHandler(this, LogLevel.VERBOSE, ...args);\n  }\n  info(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.INFO, ...args);\n    this._logHandler(this, LogLevel.INFO, ...args);\n  }\n  warn(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.WARN, ...args);\n    this._logHandler(this, LogLevel.WARN, ...args);\n  }\n  error(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.ERROR, ...args);\n    this._logHandler(this, LogLevel.ERROR, ...args);\n  }\n}\n\nexport function setLogLevel(level: LogLevelString | LogLevel): void {\n  instances.forEach(inst => {\n    inst.setLogLevel(level);\n  });\n}\n\nexport function setUserLogHandler(\n  logCallback: LogCallback | null,\n  options?: LogOptions\n): void {\n  for (const instance of instances) {\n    let customLogLevel: LogLevel | null = null;\n    if (options && options.level) {\n      customLogLevel = levelStringToEnum[options.level];\n    }\n    if (logCallback === null) {\n      instance.userLogHandler = null;\n    } else {\n      instance.userLogHandler = (\n        instance: Logger,\n        level: LogLevel,\n        ...args: unknown[]\n      ) => {\n        const message = args\n          .map(arg => {\n            if (arg == null) {\n              return null;\n            } else if (typeof arg === 'string') {\n              return arg;\n            } else if (typeof arg === 'number' || typeof arg === 'boolean') {\n              return arg.toString();\n            } else if (arg instanceof Error) {\n              return arg.message;\n            } else {\n              try {\n                return JSON.stringify(arg);\n              } catch (ignored) {\n                return null;\n              }\n            }\n          })\n          .filter(arg => arg)\n          .join(' ');\n        if (level >= (customLogLevel ?? instance.logLevel)) {\n          logCallback({\n            level: LogLevel[level].toLowerCase() as LogLevelString,\n            message,\n            args,\n            type: instance.name\n          });\n        }\n      };\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}