{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\asus\\\\ecommerce project\\\\ecommerce\\\\ecommerce-app\\\\src\\\\pages\\\\admin\\\\product\\\\FileUpload.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport Resizer from \"react-image-file-resizer\";\nimport axios from 'axios';\nimport { useSelector } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst FileUpload = () => {\n  _s();\n\n  const {\n    user\n  } = useSelector(state => ({ ...state\n  }));\n\n  const fileUploadAndResize = e => {\n    let files = e.target.files;\n\n    if (files) {\n      for (let i = 0; i < files.length; i++) {\n        Resizer.imageFileResizer(files[i], 720, 720, 'JPEG', 100, 0, uri => {\n          console.log(uri);\n        }, \"base64\");\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Choose File\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        multiple: true,\n        accept: \"images/*\",\n        hidden: true,\n        onChange: fileUploadAndResize\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n};\n\n_s(FileUpload, \"Jxgif+QfY7+MStbF+F1uZ9ypUGY=\", false, function () {\n  return [useSelector];\n});\n\n_c = FileUpload;\nexport default FileUpload;\n\nvar _c;\n\n$RefreshReg$(_c, \"FileUpload\");","map":{"version":3,"sources":["C:/Users/asus/ecommerce project/ecommerce/ecommerce-app/src/pages/admin/product/FileUpload.js"],"names":["React","Resizer","axios","useSelector","FileUpload","user","state","fileUploadAndResize","e","files","target","i","length","imageFileResizer","uri","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,0BAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,aAA5B;;;AAEA,MAAMC,UAAU,GAAG,MAAM;AAAA;;AACrB,QAAK;AAACC,IAAAA;AAAD,MAAOF,WAAW,CAAEG,KAAD,KAAU,EAAC,GAAGA;AAAJ,GAAV,CAAD,CAAvB;;AAEA,QAAMC,mBAAmB,GAAEC,CAAD,IAAK;AAC3B,QAAIC,KAAK,GAACD,CAAC,CAACE,MAAF,CAASD,KAAnB;;AACR,QAAGA,KAAH,EAAS;AACD,WAAI,IAAIE,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACF,KAAK,CAACG,MAApB,EAA2BD,CAAC,EAA5B,EAA+B;AAC3BV,QAAAA,OAAO,CAACY,gBAAR,CACIJ,KAAK,CAACE,CAAD,CADT,EAEI,GAFJ,EAGI,GAHJ,EAII,MAJJ,EAKI,GALJ,EAMI,CANJ,EAOKG,GAAD,IAAO;AACHC,UAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACH,SATL,EASM,QATN;AAWH;AACJ;AACA,GAjBD;;AAkBF,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,2BACI;AAAA,6CACI;AAAO,QAAA,IAAI,EAAC,MAAZ;AACQ,QAAA,QAAQ,MADhB;AAEQ,QAAA,MAAM,EAAC,UAFf;AAGQ,QAAA,MAAM,MAHd;AAIQ,QAAA,QAAQ,EAAEP;AAJlB;AAAA;AAAA;AAAA;AAAA,cADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADF;AAYD,CAjCD;;GAAMH,U;UACUD,W;;;KADVC,U;AAmCN,eAAeA,UAAf","sourcesContent":["import React from 'react'\r\nimport Resizer from \"react-image-file-resizer\";\r\nimport axios from 'axios'\r\nimport { useSelector } from 'react-redux';\r\n\r\nconst FileUpload = () => {\r\n    const{user}=useSelector((state)=>({...state})) \r\n\r\n    const fileUploadAndResize=(e)=>{\r\n        let files=e.target.files;\r\nif(files){\r\n        for(let i=0;i<files.length;i++){\r\n            Resizer.imageFileResizer(\r\n                files[i],\r\n                720,\r\n                720,\r\n                'JPEG',\r\n                100,\r\n                0,\r\n                (uri)=>{\r\n                    console.log(uri)                        \r\n                },\"base64\"\r\n            );\r\n        }\r\n    }\r\n    };\r\n  return (\r\n    <div className='row'>\r\n        <label>Choose File\r\n            <input type='file'\r\n                    multiple\r\n                    accept='images/*'\r\n                    hidden\r\n                    onChange={fileUploadAndResize}\r\n            />\r\n        </label>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default FileUpload"]},"metadata":{},"sourceType":"module"}