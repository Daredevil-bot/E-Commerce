{"ast":null,"code":"var isPrototype=require('./_isPrototype'),nativeKeys=require('./_nativeKeys');/** Used for built-in method references. */var objectProto=Object.prototype;/** Used to check objects for own properties. */var hasOwnProperty=objectProto.hasOwnProperty;/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */function baseKeys(object){if(!isPrototype(object)){return nativeKeys(object);}var result=[];for(var key in Object(object)){if(hasOwnProperty.call(object,key)&&key!='constructor'){result.push(key);}}return result;}module.exports=baseKeys;","map":{"version":3,"sources":["C:/Users/asus/ecommerce project/ecommerce/ecommerce-app/server/client/src/node_modules/lodash/_baseKeys.js"],"names":["isPrototype","require","nativeKeys","objectProto","Object","prototype","hasOwnProperty","baseKeys","object","result","key","call","push","module","exports"],"mappings":"AAAA,GAAIA,CAAAA,WAAW,CAAGC,OAAO,CAAC,gBAAD,CAAzB,CACIC,UAAU,CAAGD,OAAO,CAAC,eAAD,CADxB,CAGA,2CACA,GAAIE,CAAAA,WAAW,CAAGC,MAAM,CAACC,SAAzB,CAEA,gDACA,GAAIC,CAAAA,cAAc,CAAGH,WAAW,CAACG,cAAjC,CAEA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,QAASC,CAAAA,QAAT,CAAkBC,MAAlB,CAA0B,CACxB,GAAI,CAACR,WAAW,CAACQ,MAAD,CAAhB,CAA0B,CACxB,MAAON,CAAAA,UAAU,CAACM,MAAD,CAAjB,CACD,CACD,GAAIC,CAAAA,MAAM,CAAG,EAAb,CACA,IAAK,GAAIC,CAAAA,GAAT,GAAgBN,CAAAA,MAAM,CAACI,MAAD,CAAtB,CAAgC,CAC9B,GAAIF,cAAc,CAACK,IAAf,CAAoBH,MAApB,CAA4BE,GAA5B,GAAoCA,GAAG,EAAI,aAA/C,CAA8D,CAC5DD,MAAM,CAACG,IAAP,CAAYF,GAAZ,EACD,CACF,CACD,MAAOD,CAAAA,MAAP,CACD,CAEDI,MAAM,CAACC,OAAP,CAAiBP,QAAjB","sourcesContent":["var isPrototype = require('./_isPrototype'),\n    nativeKeys = require('./_nativeKeys');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseKeys;\n"]},"metadata":{},"sourceType":"module"}