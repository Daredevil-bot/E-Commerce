{"ast":null,"code":"var Stack=require('./_Stack'),equalArrays=require('./_equalArrays'),equalByTag=require('./_equalByTag'),equalObjects=require('./_equalObjects'),getTag=require('./_getTag'),isArray=require('./isArray'),isBuffer=require('./isBuffer'),isTypedArray=require('./isTypedArray');/** Used to compose bitmasks for value comparisons. */var COMPARE_PARTIAL_FLAG=1;/** `Object#toString` result references. */var argsTag='[object Arguments]',arrayTag='[object Array]',objectTag='[object Object]';/** Used for built-in method references. */var objectProto=Object.prototype;/** Used to check objects for own properties. */var hasOwnProperty=objectProto.hasOwnProperty;/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */function baseIsEqualDeep(object,other,bitmask,customizer,equalFunc,stack){var objIsArr=isArray(object),othIsArr=isArray(other),objTag=objIsArr?arrayTag:getTag(object),othTag=othIsArr?arrayTag:getTag(other);objTag=objTag==argsTag?objectTag:objTag;othTag=othTag==argsTag?objectTag:othTag;var objIsObj=objTag==objectTag,othIsObj=othTag==objectTag,isSameTag=objTag==othTag;if(isSameTag&&isBuffer(object)){if(!isBuffer(other)){return false;}objIsArr=true;objIsObj=false;}if(isSameTag&&!objIsObj){stack||(stack=new Stack());return objIsArr||isTypedArray(object)?equalArrays(object,other,bitmask,customizer,equalFunc,stack):equalByTag(object,other,objTag,bitmask,customizer,equalFunc,stack);}if(!(bitmask&COMPARE_PARTIAL_FLAG)){var objIsWrapped=objIsObj&&hasOwnProperty.call(object,'__wrapped__'),othIsWrapped=othIsObj&&hasOwnProperty.call(other,'__wrapped__');if(objIsWrapped||othIsWrapped){var objUnwrapped=objIsWrapped?object.value():object,othUnwrapped=othIsWrapped?other.value():other;stack||(stack=new Stack());return equalFunc(objUnwrapped,othUnwrapped,bitmask,customizer,stack);}}if(!isSameTag){return false;}stack||(stack=new Stack());return equalObjects(object,other,bitmask,customizer,equalFunc,stack);}module.exports=baseIsEqualDeep;","map":{"version":3,"sources":["C:/Users/asus/ecommerce project/ecommerce/ecommerce-app/server/client/src/node_modules/lodash/_baseIsEqualDeep.js"],"names":["Stack","require","equalArrays","equalByTag","equalObjects","getTag","isArray","isBuffer","isTypedArray","COMPARE_PARTIAL_FLAG","argsTag","arrayTag","objectTag","objectProto","Object","prototype","hasOwnProperty","baseIsEqualDeep","object","other","bitmask","customizer","equalFunc","stack","objIsArr","othIsArr","objTag","othTag","objIsObj","othIsObj","isSameTag","objIsWrapped","call","othIsWrapped","objUnwrapped","value","othUnwrapped","module","exports"],"mappings":"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","sourcesContent":["var Stack = require('./_Stack'),\n    equalArrays = require('./_equalArrays'),\n    equalByTag = require('./_equalByTag'),\n    equalObjects = require('./_equalObjects'),\n    getTag = require('./_getTag'),\n    isArray = require('./isArray'),\n    isBuffer = require('./isBuffer'),\n    isTypedArray = require('./isTypedArray');\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    objectTag = '[object Object]';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = objIsArr ? arrayTag : getTag(object),\n      othTag = othIsArr ? arrayTag : getTag(other);\n\n  objTag = objTag == argsTag ? objectTag : objTag;\n  othTag = othTag == argsTag ? objectTag : othTag;\n\n  var objIsObj = objTag == objectTag,\n      othIsObj = othTag == objectTag,\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && isBuffer(object)) {\n    if (!isBuffer(other)) {\n      return false;\n    }\n    objIsArr = true;\n    objIsObj = false;\n  }\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new Stack);\n    return (objIsArr || isTypedArray(object))\n      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n  }\n  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n\n      stack || (stack = new Stack);\n      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  stack || (stack = new Stack);\n  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n}\n\nmodule.exports = baseIsEqualDeep;\n"]},"metadata":{},"sourceType":"module"}